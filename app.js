// Telegram WebApp init
const tg = window.Telegram?.WebApp;
if (tg) {
  tg.expand(); // —Ä–∞—Å—Ç—è–Ω—É—Ç—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
  tg.setHeaderColor('#0e0f12');
  tg.setBackgroundColor('#0e0f12');
}

const ACTIONS = {
  soft: [
    "–Ω–µ–∂–Ω–æ –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å", "–ø–æ–≥–ª–∞–¥–∏—Ç—å", "–ª–∞—Å–∫–æ–≤–æ –æ–±–Ω—è—Ç—å",
    "—à–µ–ø–Ω—É—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç", "–ª—ë–≥–∫–∏–π –º–∞—Å—Å–∞–∂", "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –≤–∑–≥–ª—è–¥–æ–º –∏ —É–ª—ã–±–Ω—É—Ç—å—Å—è"
  ],
  spicy: [
    "—Å—Ç—Ä–∞—Å—Ç–Ω–æ –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å", "–Ω–µ—Å–º–µ–ª–æ –ø–æ–∫—É—Å–∞—Ç—å", "–ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–Ω—á–∏–∫–∞–º–∏ –ø–∞–ª—å—Ü–µ–≤",
    "—à—ë–ø–æ—Ç –Ω–∞ —É—à–∫–æ –∏ –ø–æ—Ü–µ–ª—É–π", "–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–≥–ª–∞–¥–∏—Ç—å", "–æ–±–Ω—è—Ç—å –∫—Ä–µ–ø—á–µ –∏ –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å"
  ],
  extra: [
    "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å, –Ω–µ –æ—Ç–≤–æ–¥—è –≤–∑–≥–ª—è–¥–∞", "–ª–∞—Å–∫–æ–≤–æ –ø—Ä–∏–∫—É—Å–∏—Ç—å", "–æ—á–µ—Ä—Ç–∏—Ç—å –ª–∏–Ω–∏—é –≥—É–±–∞–º–∏",
    "–∑–∞–¥–∞—Ç—å –¥–µ—Ä–∑–∫–∏–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –∏ –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å", "–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–º–∞—Å—Å–∏—Ä–æ–≤–∞—Ç—å", "–ø–æ–∏–≥—Ä–∞—Ç—å –¥—ã—Ö–∞–Ω–∏–µ–º"
  ]
};
const PARTS = {
  soft: ["—à–µ—é","–≥—É–±—ã","—É—à–∫–æ","—Å–ø–∏–Ω—É","–∂–∏–≤–æ—Ç","–ª–∞–¥–æ–Ω—å"],
  spicy: ["–∫–ª—é—á–∏—Ü—É","–Ω–∏–∂–Ω—é—é –≥—É–±—É","–≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å—Ç–æ—Ä–æ–Ω—É –ø—Ä–µ–¥–ø–ª–µ—á—å—è","–ø–æ—è—Å–Ω–∏—Ü—É","–ª–∏–Ω–∏—é —á–µ–ª—é—Å—Ç–∏","–∫–æ–ª–µ–Ω–∫—É"],
  extra: ["–ª–∏–Ω–∏—é —à–µ–∏ –¥–æ –∫–ª—é—á–∏—Ü—ã","—É–≥–æ–ª–æ–∫ –≥—É–±","–∑–∞ —É—à–∫–æ–º","–Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å —Å–ø–∏–Ω—ã","—Å–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ","–≤–ø–∞–¥–∏–Ω–∫—É –∫–ª—é—á–∏—Ü—ã"]
};

const die1 = document.getElementById('die1');
const die2 = document.getElementById('die2');
const rollBtn = document.getElementById('rollBtn');
const againBtn = document.getElementById('againBtn');
const result = document.getElementById('result');
const spice = document.getElementById('spice');

let rolling = false;

function rnd1to6(){ return 1 + Math.floor(Math.random()*6); }
function setFace(el, v){
  el.classList.remove('face-1','face-2','face-3','face-4','face-5','face-6');
  el.classList.add(`face-${v}`);
}

async function haptic(type="impact"){
  try {
    if (!tg || !tg.HapticFeedback) return;
    if (type==="impact") tg.HapticFeedback.impactOccurred("medium");
    if (type==="success") tg.HapticFeedback.notificationOccurred("success");
  } catch(e){}
}

async function roll(){
  if (rolling) return;
  rolling = true;
  await haptic("impact");

  // –≤–∏–∑—É–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
  die1.classList.add('rolling');
  die2.classList.add('rolling');
  const v1 = rnd1to6();
  const v2 = rnd1to6();

  // –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–¥ –∞–Ω–∏–º–∞—Ü–∏—é
  await new Promise(r => setTimeout(r, 850));
  setFace(die1, v1);
  setFace(die2, v2);
  die1.classList.remove('rolling');
  die2.classList.remove('rolling');

  const mode = spice.value;
  const a = ACTIONS[mode][v1-1];
  const p = PARTS[mode][v2-1];

  result.innerHTML = `üëâ –ó–∞–¥–∞–Ω–∏–µ: <strong>${a} ${p}</strong>`;
  await haptic("success");
}

rollBtn.addEventListener('click', roll);
againBtn.addEventListener('click', roll);

// –ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
setFace(die1, 1); setFace(die2, 1);
